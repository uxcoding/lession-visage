/* ------------------------------------------------------------------------------------
CSS-3 Property :: box-sizing || (box-sizing)
---------------------------------------------------------------------------------------
[border-box] Arrange for padding and border size.
------------------------------------------------------------------------------------ */
@mixin box-sizing($box-sizing) {
  box-sizing        : $box-sizing;
  -ms-box-sizing    : $box-sizing;
  -moz-box-sizing   : $box-sizing;
  -webkit-box-sizing: $box-sizing;
  @content;
}

/* ------------------------------------------------------------------------------------
CSS Property :: margin || (add-margin | margin-position)
---------------------------------------------------------------------------------------
[5px] - [8px | 8px | 8px | 8px]
------------------------------------------------------------------------------------ */
@mixin add-margin($size) {
  margin: $size;
}

@mixin margin-position($top: null, $right: null, $bottom: null, $left: null) {
  @if ($top !=null) and ($top >=0) {
    margin-top: $top;
  }

  @if ($right !=null) and ($right >=0) {
    margin-right: $right;
  }

  @if ($bottom !=null) and ($bottom >=0) {
    margin-bottom: $bottom;
  }

  @if ($left !=null) and ($left >=0) {
    margin-left: $left;
  }
}

/* ------------------------------------------------------------------------------------
CSS Property :: padding || (add-padding | padding-position)
---------------------------------------------------------------------------------------
[5px] - [8px | 8px | 8px | 8px]
------------------------------------------------------------------------------------ */
@mixin add-padding($size) {
  padding: $size;
}

@mixin padding-position($top: null, $right: null, $bottom: null, $left: null) {
  @if (($top !=null) and ($top >=0)) {
    padding-top: $top;
  }

  @if (($right !=null) and ($right >=0)) {
    padding-right: $right;
  }

  @if ($bottom !=null) and ($bottom >=0) {
    padding-bottom: $bottom;
  }

  @if ($left !=null) and ($left >=0) {
    padding-left: $left;
  }
}

/* ------------------------------------------------------------------------------------
CSS-3 Property :: border || (add-border | add-border-position)
---------------------------------------------------------------------------------------
[5px | solid, dotted, dashed, double, etc | #ff0000 ] - [8px | 8px | 8px | 8px]
------------------------------------------------------------------------------------ */
@mixin add-border($size: 5px, $style: solid, $color: #ff0000) {
  border        : $size $style $color;
  -moz-border   : $size $style $color;
  -webkit-border: $size $style $color;
}

$border-value: 5px solid #ec606a,
5px solid #434445,
5px solid #e41c2a,
5px solid #000000;

@mixin add-border-position($border, $border-right: null, $border-bottom: null, $border-left: null) {
  $args: length($border);

  // Reset Variables Based on Argument Count
  @if (length(nth($border, 1)) > 1) {
    @if ($args==4) {
      $border-left  : nth($border, 4);
      $border-bottom: nth($border, 3);
      $border-right : nth($border, 2);
      $border       : nth($border, 1);
    }

    @else if ($args==3) {
      $border-bottom: nth($border, 3);
      $border-right : nth($border, 2);
      $border       : nth($border, 1);
    }

    @else if ($args==2) {
      $border-right: nth($border, 2);
      $border      : nth($border, 1);
    }
  }

  // Assign Attributes from Variables
  @if ($border and $border-right and $border-bottom and $border-left) {
    border-top   : $border;
    border-right : $border-right;
    border-bottom: $border-bottom;
    border-left  : $border-left;
  }

  @else if ($border and $border-right and $border-bottom) {
    border-top   : $border;
    border       : $border-right;
    border-bottom: $border-bottom;
  }

  @else if ($border and $border-right) {
    border      : $border;
    border-right: $border-right;
  }

  @else {
    border: $border;
  }
}

/* ------------------------------------------------------------------------------------
CSS-3 Property :: border-radius || (add-radius | border-radius)
---------------------------------------------------------------------------------------
[5px] - [8px | 8px | 8px | 8px]
------------------------------------------------------------------------------------ */
@mixin add-radius($size) {
  border-radius        : $size;
  -moz-border-radius   : $size;
  -webkit-border-radius: $size;
}

@mixin border-radius($topLeft: null, $topRight: null, $bottomLeft: null, $bottomRight: null) {
  @if ($topLeft !=null) and ($topLeft >=0) {
    border-top-left-radius        : $topLeft;
    -moz-border-top-left-radius   : $topLeft;
    -webkit-border-top-left-radius: $topLeft;
  }

  @if ($topRight !=null) and ($topRight >=0) {
    border-top-right-radius        : $topRight;
    -moz-border-top-right-radius   : $topRight;
    -webkit-border-top-right-radius: $topRight;
  }

  @if ($bottomLeft !=null) and ($bottomLeft >=0) {
    border-bottom-left-radius        : $bottomLeft;
    -moz-border-bottom-left-radius   : $bottomLeft;
    -webkit-border-bottom-left-radius: $bottomLeft;
  }

  @if ($bottomRight !=null) and ($bottomRight >=0) {
    border-bottom-right-radius        : $bottomRight;
    -moz-border-bottom-right-radius   : $bottomRight;
    -webkit-border-bottom-right-radius: $bottomRight;
  }
}

/* ------------------------------------------------------------------------------------
CSS-3 Property :: box-shadow || (box-shadow)
---------------------------------------------------------------------------------------
[right: 5px | bottom: 5px | 1px | 0px | #ff0000]
------------------------------------------------------------------------------------ */
@mixin box-shadow($right: 0px, $bottom: 2px, $blur: 12px, $spread: 0px, $color: rgba(0, 0, 0, 0.2)) {
  box-shadow        : $right $bottom $blur $spread $color;
  -moz-box-shadow   : $right $bottom $blur $spread $color;
  -webkit-box-shadow: $right $bottom $blur $spread $color;
}

/* ------------------------------------------------------------------------------------
CSS-3 Property :: transition || (add-transition)
---------------------------------------------------------------------------------------
[All | 0.5s | 0.3s | ease, ease-in, ease-out, ease-in-out, linear, steps(5) etc.]
------------------------------------------------------------------------------------ */
@mixin transition($transition...) {
  transition        : $transition;
  -moz-transition   : $transition;
  -webkit-transition: $transition;
}

@mixin transition-property($property...) {
  transition-property        : $property;
  -moz-transition-property   : $property;
  -webkit-transition-property: $property;
}

@mixin transition-duration($duration...) {
  transition-property        : $duration;
  -moz-transition-property   : $duration;
  -webkit-transition-property: $duration;
}

@mixin transition-timing-function($function...) {
  transition-timing-function        : $function;
  -moz-transition-timing-function   : $function;
  -webkit-transition-timing-function: $function;
}

@mixin transition-delay($delay...) {
  transition-delay        : $delay;
  -moz-transition-delay   : $delay;
  -webkit-transition-delay: $delay;
}

/* ------------------------------------------------------------------------------------
CSS-3 Property :: transform || (add-transition)
---------------------------------------------------------------------------------------
[translateY() | translateX() | translate(y,x)]
------------------------------------------------------------------------------------ */
@mixin transform-vertical($vertical){
  transform: translateY($vertical);
  -moz-transform: translateY($vertical);
  -webkit-transform: translateY($vertical);
}

@mixin transform-horizental($horizental){
  transform: translateY($horizental);
  -moz-transform: translateY($horizental);
  -webkit-transform: translateY($horizental);
}

@mixin transform-both($vertical, $horizental){
  transform: translate($vertical, $horizental);
  -moz-transform: translate($vertical, $horizental);
  -webkit-transform: translate($vertical, $horizental);
}


/* ------------------------------------------------------------------------------------
Display Property :: flex || (display-flex)
---------------------------------------------------------------------------------------
[flex]
------------------------------------------------------------------------------------ */
@mixin display-flex() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-direction || (flex-direction)
---------------------------------------------------------------------------------------
[row | row-reverse | column | column-reverse]
------------------------------------------------------------------------------------ */
@mixin flex-direction($direction) {
  flex-direction        : $direction;
  -ms-flex-direction    : $direction;
  -moz-flex-direction   : $direction;
  -webkit-flex-direction: $direction;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-wrap || (flex-wrap)
---------------------------------------------------------------------------------------
[nowrap | wrap | wrap-reverse]
------------------------------------------------------------------------------------ */
@mixin flex-wrap($wrap: nowrap) {
  flex-wrap        : $wrap;
  -ms-flex-wrap    : $wrap;
  -moz-flex-wrap   : $wrap;
  -webkit-flex-wrap: $wrap;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-Flow || (flex-flow)
---------------------------------------------------------------------------------------
[flex-direction | flex-wrap] It is short hand propery for both.
------------------------------------------------------------------------------------ */
@mixin flex-flow($direction: row, $wrap: nowrap) {
  flex-flow        : $direction $wrap;
  -ms-flex-flow    : $direction $wrap;
  -moz-flex-flow   : $direction $wrap;
  -webkit-flex-flow: $direction $wrap;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-order || (flex-order)
---------------------------------------------------------------------------------------
[integer]
------------------------------------------------------------------------------------ */
@mixin flex-order($order) {
  order                    : $order;
  -ms-flex-order           : $order;
  -webkit-order            : $order;
  -moz-box-ordinal-group   : $order;
  -webkit-box-ordinal-group: $order;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-grow || (flex-grow)
---------------------------------------------------------------------------------------
[integer]
------------------------------------------------------------------------------------ */
@mixin flex-grow($grow) {
  flex-grow        : $grow;
  -ms-flex-grow    : $grow;
  -moz-flex-grow   : $grow;
  -webkit-flex-grow: $grow;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-shrink || (flex-shrink)
---------------------------------------------------------------------------------------
[integer]
------------------------------------------------------------------------------------ */
@mixin flex-shrink($shrink) {
  flex-shrink        : $shrink;
  -ms-flex-shrink    : $shrink;
  -moz-flex-shrink   : $shrink;
  -webkit-flex-shrink: $shrink;
}

/* ------------------------------------------------------------------------------------
Display Property :: flex-basis || (flex-basis)
---------------------------------------------------------------------------------------
[width]
------------------------------------------------------------------------------------ */
@mixin flex-basis($width) {
  flex-basis        : $width;
  -ms-flex-basis    : $width;
  -moz-flex-basis   : $width;
  -webkit-flex-basis: $width;
}

/* ------------------------------------------------------------------------------------
Display Property :: jsutify-content || (justify-content)
---------------------------------------------------------------------------------------
[flex-start | flex-end | center | space-around | space-between | space-evenly] 
------------------------------------------------------------------------------------ */
@mixin justify-content($justify) {
  justify-content        : $justify;
  -ms-flex-pack          : $justify;
  -ms-justify-content    : $justify;
  -moz-justify-content   : $justify;
  -webkit-justify-content: $justify;
}

/* ------------------------------------------------------------------------------------
Display Property :: align-content || (align-content)
---------------------------------------------------------------------------------------
[flex-start | flex-end | center | stretch | space-around | space-between | space-evenly] 
------------------------------------------------------------------------------------ */
@mixin align-content($align) {
  align-content        : $align;
  -ms-align-content    : $align;
  -moz-align-content   : $align;
  -webkit-align-content: $align;
}

/* ------------------------------------------------------------------------------------
Display Property :: align-items || (align-items)
---------------------------------------------------------------------------------------
[flex-start | flex-end | center | baseline  | stretch] 
------------------------------------------------------------------------------------ */
@mixin align-items($align) {
  align-items        : $align;
  -ms-flex-align     : $align;
  -ms-align-items    : $align;
  -moz-align-items   : $align;
  -webkit-align-items: $align;
}

/* ------------------------------------------------------------------------------------
Display Property :: align-items || (align-items)
---------------------------------------------------------------------------------------
[flex-start | flex-end | center | baseline  | stretch | auto] 
------------------------------------------------------------------------------------ */
@mixin align-self($self) {
  align-self        : $self;
  -ms-align-self    : $self;
  -moz-align-self   : $self;
  -webkit-align-self: $self;
}

/* ------------------------------------------------------------------------------------
Mixin created BY :: uxcoding
---------------------------------------------------------------------------------------
End ::
------------------------------------------------------------------------------------ */